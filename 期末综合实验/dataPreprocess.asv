function [trainData, testData] = dataPreprocess(filename)
% 数据的预处理 
% params filename 存放数据的excel文件名
% return trainData 训练集数据
% return testData 测试集数据
data = xlsread(filename);
[nanRows, ~] = find(isnan(data));           % 找到存在NaN的行
data(nanRows, :) = [];                      % 删除存在NaN的行
label = ["OLR", "F", "进水COD", "HLR",...   % 数据标签
         "ALR", "pH", "温度", "TSS",...
         "进水VFA", "出水COD", "COD去除率(%)", "出水VFA"];

% 画图查看原始数据分布情况
for j = 1: 12
    subplot(4, 3, j)
    plot(data(:, j))
    title(label(j))
end

% 剔除野数据，即3sigma以外数据
for j = 1: 12
    miu = mean(data(:, j));         % 平均值
    sigma = std(data(:, j));        % 标准差
    for i = 1: size(data, 1)
        % 3sigma以外的数据赋值NaN
        if (abs(data(i, j) - miu) > 3 * sigma)
            data(i, j) = NaN;
        end
    end
end
[nanRows, ~] = find(isnan(data));           % 找到存在NaN的行
data(nanRows, :) = [];                      % 删除存在NaN的行

% 画图查看预处理后数据分布情况
figure()
for j = 1: 12
    subplot(4, 3, j)
    plot(data(:, j))
    title(label(j))
end

% 划分训练集与测试集
trainIndex = crossvalind('HoldOut', size(data,1), 0.25);    % 训练集索引
testIndex = ~trainIndex;                            % 测试集索引
trainData = data(trainIndex, :);                    % 训练集数据
testData = data(testIndex, :);                      % 测试集数据

%定义BP神经网络
net_predict = newff([0 1;0 1;0 1],[5,1],{'tansig','logsig'},'traingd');
%网络参数的设置
net_predict.trainParam.epochs = 20000;  %训练次数设置
net_predict.trainParam.goal = 0.01;  %训练目标设置
net_predict.trainParam.lr = 0.05;  %学习率设置 
net_predict.trainParam.mc = 0.9;  %动量因子的设置